import { MongoClient, ChangeStream, Document } from 'mongodb';
import config from '../config';
import bot from "../bot";

const mongodbConfig = config.mongodb;

// Function to connect to MongoDB and listen for changes
export const listenToChangeStream = async (): Promise<void> => {
    // Ki·ªÉm tra n·∫øu uri ho·∫∑c collectionName kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
    if (!mongodbConfig.uri) {
        console.error('Error: MongoDB URI is undefined');
        return; // D·ª´ng h√†m n·∫øu uri kh√¥ng h·ª£p l·ªá
    }
    
    if (!mongodbConfig.collectionName) {
        console.error('Error: MongoDB collectionName is undefined');
        return; // D·ª´ng h√†m n·∫øu collectionName kh√¥ng h·ª£p l·ªá
    }
    
    const client = new MongoClient(mongodbConfig.uri);
    
    try {
        // K·∫øt n·ªëi t·ªõi MongoDB
        await client.connect();
        console.log('Connected to MongoDB');
        
        const db = client.db(mongodbConfig.dbName);
        const collection = db.collection<Document>(mongodbConfig.collectionName);
        
        // B·∫Øt ƒë·∫ßu l·∫Øng nghe Change Streams tr√™n collection
        const changeStream: ChangeStream<Document> = collection.watch();
        
        // X·ª≠ l√Ω c√°c thay ƒë·ªïi
        changeStream.on('change', async (change) => {
            if (change.operationType === 'insert') {
                const newDocument: Document = change.fullDocument;
                console.log('New document inserted:', newDocument);
                
                // T·∫°o n·ªôi dung th√¥ng b√°o
                const alertMessage = `
üì¢ New Record Inserted!
‚û°Ô∏è _id: ${newDocument._id}
‚û°Ô∏è Data: ${JSON.stringify(newDocument, null, 2)}
`;
                if (!config.telegram.chatId) {
                    console.error('Error: Telegram chat ID is undefined. Please set the TELEGRAM_CHAT_ID in your environment variables.');
                    process.exit(1);
                }
                
                // G·ª≠i th√¥ng b√°o l√™n Telegram
                await bot.api.sendMessage(config.telegram.chatId, alertMessage);
            }
        });
        
        // ƒê·∫£m b·∫£o service v·∫´n ch·∫°y ƒë·ªÉ l·∫Øng nghe c√°c s·ª± ki·ªán MongoDB
        console.log('Listening for changes...');
    } catch (error) {
        console.error('Error connecting to MongoDB or handling change stream:', error);
        // N·∫øu c√≥ l·ªói, ƒë√≥ng k·∫øt n·ªëi
        await client.close();
    }
};